// Transcript for React Todo List Tutorial (9wiWzu_tRB0)
// This is a simplified version - in production, you'd fetch from YouTube API

export const todoListTranscript = [
  { timestamp: "0:00", text: "Welcome everyone, today we're going to build a simple todo list application in React." },
  { timestamp: "0:05", text: "This is a great beginner project to understand React fundamentals." },
  { timestamp: "0:10", text: "Let me create a new components folder to organize our code." },
  { timestamp: "0:15", text: "I'll create a new file called TodoList.jsx inside the components folder." },
  { timestamp: "0:20", text: "Now let's start by creating a functional component. I'll type function TodoList." },
  { timestamp: "0:25", text: "And we need to export this component so we can use it in other files." },
  { timestamp: "0:30", text: "I'll add export default at the beginning. This makes it the default export from this file." },
  { timestamp: "0:35", text: "Inside the function, we'll return some JSX. Let me add a return statement." },
  { timestamp: "0:40", text: "For now, let's just return a div with an h1 that says Todo List." },
  { timestamp: "0:45", text: "Now we need to make this interactive. React components need state to handle changing data." },
  { timestamp: "0:50", text: "Let me import useState from React at the top of the file." },
  { timestamp: "0:55", text: "useState is a React Hook that lets us add state to functional components." },
  { timestamp: "1:00", text: "Now I'll create a state variable for our todos. const todos, setTodos equals useState." },
  { timestamp: "1:05", text: "We'll initialize it with an empty array since we don't have any todos yet." },
  { timestamp: "1:10", text: "We also need state for the input field. Let me create another state variable." },
  { timestamp: "1:15", text: "const inputValue, setInputValue equals useState with an empty string." },
  { timestamp: "1:20", text: "Now let's add an input field to our JSX so users can type new todos." },
  { timestamp: "1:25", text: "I'll add an input element with type text." },
  { timestamp: "1:30", text: "This input needs to be controlled, so I'll set its value to inputValue." },
  { timestamp: "1:35", text: "And we need an onChange handler to update the state when the user types." },
  { timestamp: "1:40", text: "onChange equals an arrow function that takes the event parameter." },
  { timestamp: "1:45", text: "Inside, we'll call setInputValue with e.target.value." },
  { timestamp: "1:50", text: "Now let's add a button to add new todos. I'll create an Add button." },
  { timestamp: "1:55", text: "We need a function to handle adding todos. Let me create handleAddTodo." },
  { timestamp: "2:00", text: "This function will update our todos state by creating a new array with the new todo." },
  { timestamp: "2:05", text: "We'll use the spread operator to create a new array with all existing todos plus the new one." },
  { timestamp: "2:10", text: "setTodos, and inside we'll spread the current todos and add a new object." },
  { timestamp: "2:15", text: "Each todo needs an id, so I'll use Date.now() for a simple unique identifier." },
  { timestamp: "2:20", text: "And the text property will be the inputValue from our state." },
  { timestamp: "2:25", text: "After adding, we should clear the input, so setInputValue to empty string." },
  { timestamp: "2:30", text: "Let me connect this function to our button with an onClick handler." },
  { timestamp: "2:35", text: "Now we need to display our todos. I'll add a ul element below the input." },
  { timestamp: "2:40", text: "To render the list, we'll use the map method on our todos array." },
  { timestamp: "2:45", text: "todos.map takes a function that receives each todo item." },
  { timestamp: "2:50", text: "For each todo, we'll return an li element." },
  { timestamp: "2:55", text: "React needs a unique key prop for each list item to efficiently update the DOM." },
  { timestamp: "3:00", text: "I'll use todo.id as the key since we made sure it's unique." },
  { timestamp: "3:05", text: "Inside the li, we'll display the todo.text." },
  { timestamp: "3:10", text: "Let's also add a delete button for each todo." },
  { timestamp: "3:15", text: "I'll add a button element inside each li after the text." },
  { timestamp: "3:20", text: "For the delete functionality, we need to pass the todo id to know which one to delete." },
  { timestamp: "3:25", text: "onClick needs an arrow function that calls handleDelete with the todo.id." },
  { timestamp: "3:30", text: "Now let me create the handleDelete function." },
  { timestamp: "3:35", text: "To delete a todo, we'll filter the array to exclude the one with the matching id." },
  { timestamp: "3:40", text: "setTodos with todos.filter, checking if todo.id is not equal to the id parameter." },
  { timestamp: "3:45", text: "This creates a new array without the deleted todo, which triggers a re-render." },
  { timestamp: "3:50", text: "Let's test our application. I'll save the file and check if everything works." },
  { timestamp: "3:55", text: "Great! We can add todos, see them in the list, and delete them." },
  { timestamp: "4:00", text: "This demonstrates key React concepts: components, state, event handling, and rendering lists." },
  { timestamp: "4:05", text: "The important thing to understand is how React's state management works." },
  { timestamp: "4:10", text: "Every time we call setState, React re-renders the component with the new data." },
  { timestamp: "4:15", text: "And by using immutable updates, React can efficiently determine what changed." },
  { timestamp: "4:20", text: "That's why we use spread operator and filter instead of mutating the array directly." },
  { timestamp: "4:25", text: "This pattern of immutable state updates is fundamental to React development." },
  { timestamp: "4:30", text: "In a real application, you might want to add features like editing todos or marking them complete." },
  { timestamp: "4:35", text: "But this basic structure gives you the foundation to build upon." },
  { timestamp: "4:40", text: "Remember, React is all about breaking your UI into reusable components with their own state and logic." },
  { timestamp: "4:45", text: "Thanks for following along! Practice building variations of this to solidify these concepts." },
  { timestamp: "4:50", text: "Let me show you a few more advanced features you could add to this todo list." },
  { timestamp: "4:55", text: "For example, you might want to add the ability to edit existing todos." },
  { timestamp: "5:00", text: "To do that, you'd need to track which todo is being edited in your state." },
  { timestamp: "5:05", text: "You could add an isEditing property to each todo object." },
  { timestamp: "5:10", text: "Then conditionally render either the text or an input field based on that property." },
  { timestamp: "5:15", text: "Another common feature is marking todos as complete." },
  { timestamp: "5:20", text: "You'd add a completed boolean property to each todo." },
  { timestamp: "5:25", text: "Then use conditional styling to show completed todos differently, maybe with a strikethrough." },
  { timestamp: "5:30", text: "You could also add filters to show all, active, or completed todos." },
  { timestamp: "5:35", text: "This would involve creating a filter state and using it when rendering the list." },
  { timestamp: "5:40", text: "For persistence, you might want to save todos to localStorage." },
  { timestamp: "5:45", text: "You'd use useEffect to save whenever todos change, and load them on component mount." },
  { timestamp: "5:50", text: "Let's also talk about some common mistakes beginners make with React." },
  { timestamp: "5:55", text: "One mistake is directly mutating state instead of creating new objects or arrays." },
  { timestamp: "6:00", text: "Always remember that React needs to see a new reference to trigger re-renders." },
  { timestamp: "6:05", text: "Another mistake is forgetting the key prop when rendering lists." },
  { timestamp: "6:10", text: "React uses keys to efficiently update the DOM when list items change." },
  { timestamp: "6:15", text: "Also, be careful about using array indexes as keys if the list can be reordered." },
  { timestamp: "6:20", text: "It's better to use stable, unique IDs like we did with Date.now()." },
  { timestamp: "6:25", text: "Some beginners also forget to prevent form submission when handling forms." },
  { timestamp: "6:30", text: "Always call e.preventDefault() in your form submit handlers." },
  { timestamp: "6:35", text: "Let's talk about component composition and when to split components." },
  { timestamp: "6:40", text: "Our TodoList component is getting quite large with all this functionality." },
  { timestamp: "6:45", text: "In a real application, you might split it into smaller components." },
  { timestamp: "6:50", text: "For example, TodoItem could be its own component that receives props." },
  { timestamp: "6:55", text: "This makes your code more modular and easier to test." },
  { timestamp: "7:00", text: "You could also have a TodoForm component for the input and add button." },
  { timestamp: "7:05", text: "This separation of concerns makes your code more maintainable." },
  { timestamp: "7:10", text: "When passing functions as props, be mindful of performance." },
  { timestamp: "7:15", text: "Creating new functions in render can cause unnecessary re-renders of child components." },
  { timestamp: "7:20", text: "In performance-critical apps, you might use useCallback to memoize functions." },
  { timestamp: "7:25", text: "But don't optimize prematurely - React is quite fast even without these optimizations." },
  { timestamp: "7:30", text: "Let's also discuss state management as your app grows." },
  { timestamp: "7:35", text: "For simple apps like this, component state with useState is perfect." },
  { timestamp: "7:40", text: "But as your app grows, you might need more sophisticated state management." },
  { timestamp: "7:45", text: "You could use Context API for sharing state between components." },
  { timestamp: "7:50", text: "Or for very complex apps, consider libraries like Redux or Zustand." },
  { timestamp: "7:55", text: "The key is to choose the right tool for your specific needs." },
  { timestamp: "8:00", text: "Don't add complexity until you actually need it." },
  { timestamp: "8:05", text: "Now let's talk about testing React components." },
  { timestamp: "8:10", text: "You should test that your components render correctly and handle user interactions." },
  { timestamp: "8:15", text: "React Testing Library is great for testing components from a user's perspective." },
  { timestamp: "8:20", text: "Test the behavior, not the implementation details." },
  { timestamp: "8:25", text: "For our todo list, you'd test adding todos, deleting them, and any other features." },
  { timestamp: "8:30", text: "Good tests give you confidence when refactoring or adding new features." },
  { timestamp: "8:35", text: "Let me also mention accessibility considerations." },
  { timestamp: "8:40", text: "Always use semantic HTML elements like button, not divs with onClick." },
  { timestamp: "8:45", text: "Add proper labels to form inputs for screen reader users." },
  { timestamp: "8:50", text: "Consider keyboard navigation - can users tab through your interface?" },
  { timestamp: "8:55", text: "These details make your app usable by everyone." },
  { timestamp: "9:00", text: "As we wrap up, remember that React is just JavaScript." },
  { timestamp: "9:05", text: "The better you understand JavaScript, the better you'll be with React." },
  { timestamp: "9:10", text: "Keep practicing, build lots of small projects, and gradually increase complexity." },
  { timestamp: "9:15", text: "Thanks again for watching this React todo list tutorial." },
  { timestamp: "9:20", text: "I hope you found it helpful for understanding React fundamentals." },
  { timestamp: "9:25", text: "Feel free to leave questions in the comments, and happy coding!" },
  { timestamp: "9:30", text: "Don't forget to subscribe for more React tutorials and web development content." },
  { timestamp: "9:35", text: "Before we end, let me show you how to deploy this todo app to production." },
  { timestamp: "9:40", text: "You have several options for deployment - Vercel, Netlify, or GitHub Pages." },
  { timestamp: "9:45", text: "Since this is a React app, we need to build it first using npm run build." },
  { timestamp: "9:50", text: "This creates an optimized production bundle in the build folder." },
  { timestamp: "9:55", text: "For Vercel, you can simply connect your GitHub repo and it handles everything." },
  { timestamp: "10:00", text: "Let's also add some CSS to make our todo list look more professional." },
  { timestamp: "10:05", text: "You can use CSS modules, styled-components, or plain CSS files." },
  { timestamp: "10:10", text: "I'll add some basic styles to improve the visual appearance." },
  { timestamp: "10:15", text: "Adding padding, borders, and colors makes a huge difference in user experience." },
  { timestamp: "10:20", text: "Let's also add hover effects to make the interface feel more interactive." },
  { timestamp: "10:25", text: "CSS transitions can make state changes feel smooth and professional." },
  { timestamp: "10:30", text: "Now let's implement localStorage to persist todos between page refreshes." },
  { timestamp: "10:35", text: "We'll use useEffect to save todos whenever they change." },
  { timestamp: "10:40", text: "And another useEffect to load todos when the component first mounts." },
  { timestamp: "10:45", text: "This pattern of using effects for side effects is common in React." },
  { timestamp: "10:50", text: "Let me show you how to handle edge cases, like empty todo text." },
  { timestamp: "10:55", text: "We should prevent users from adding blank todos to the list." },
  { timestamp: "11:00", text: "Input validation is important for maintaining data quality." },
  { timestamp: "11:05", text: "Let's also trim whitespace from the input before saving." },
  { timestamp: "11:10", text: "These small details make your app feel more polished and professional." },
  { timestamp: "11:15", text: "Now let's add keyboard shortcuts - Enter to add, Escape to clear." },
  { timestamp: "11:20", text: "Keyboard accessibility improves the user experience significantly." },
  { timestamp: "11:25", text: "We can use onKeyDown events to handle keyboard interactions." },
  { timestamp: "11:30", text: "Let's also add a todo counter to show how many items are in the list." },
  { timestamp: "11:35", text: "This gives users immediate feedback about their progress." },
  { timestamp: "11:40", text: "We can also show different messages when the list is empty." },
  { timestamp: "11:45", text: "Empty states are important for guiding new users." },
  { timestamp: "11:50", text: "Let me demonstrate how to add animation when todos are added or removed." },
  { timestamp: "11:55", text: "React Transition Group or Framer Motion are great for animations." },
  { timestamp: "12:00", text: "But for simple cases, CSS animations work perfectly fine." },
  { timestamp: "12:05", text: "Now let's talk about performance optimization techniques." },
  { timestamp: "12:10", text: "For large lists, virtualization can improve performance dramatically." },
  { timestamp: "12:15", text: "React.memo can prevent unnecessary re-renders of child components." },
  { timestamp: "12:20", text: "useMemo and useCallback are useful for expensive computations." },
  { timestamp: "12:25", text: "But remember - premature optimization is the root of all evil." },
  { timestamp: "12:30", text: "Only optimize when you have actual performance problems." },
  { timestamp: "12:35", text: "Let's add drag and drop functionality to reorder todos." },
  { timestamp: "12:40", text: "This requires tracking drag state and updating todo positions." },
  { timestamp: "12:45", text: "The HTML5 drag and drop API works well for simple cases." },
  { timestamp: "12:50", text: "For complex drag interactions, consider libraries like react-beautiful-dnd." },
  { timestamp: "12:55", text: "Let me show you how to add categories or tags to todos." },
  { timestamp: "13:00", text: "This involves extending our todo data structure with additional fields." },
  { timestamp: "13:05", text: "We can use different colors or icons to represent categories." },
  { timestamp: "13:10", text: "Filtering by category is then just a matter of array filtering." },
  { timestamp: "13:15", text: "Let's implement a search feature to find specific todos." },
  { timestamp: "13:20", text: "Real-time search as you type provides great user experience." },
  { timestamp: "13:25", text: "We can use toLowerCase() for case-insensitive searching." },
  { timestamp: "13:30", text: "Debouncing search input can improve performance for large lists." },
  { timestamp: "13:35", text: "Now let's add due dates to our todos." },
  { timestamp: "13:40", text: "Working with dates in JavaScript can be tricky." },
  { timestamp: "13:45", text: "Libraries like date-fns or moment.js can help with date formatting." },
  { timestamp: "13:50", text: "But for simple cases, native Date objects work fine." },
  { timestamp: "13:55", text: "Let's add sorting options - by date, alphabetically, or by completion." },
  { timestamp: "14:00", text: "Array.sort() with custom compare functions handles this nicely." },
  { timestamp: "14:05", text: "Remember that sort mutates the array, so create a copy first." },
  { timestamp: "14:10", text: "Let's implement undo/redo functionality for todo operations." },
  { timestamp: "14:15", text: "This requires maintaining a history of state changes." },
  { timestamp: "14:20", text: "You can use an array to track previous states." },
  { timestamp: "14:25", text: "Then navigate through history with undo and redo buttons." },
  { timestamp: "14:30", text: "Let me show you how to export todos to different formats." },
  { timestamp: "14:35", text: "JSON export is straightforward - just stringify the array." },
  { timestamp: "14:40", text: "CSV export requires formatting data into comma-separated values." },
  { timestamp: "14:45", text: "You can also generate PDF reports using libraries like jsPDF." },
  { timestamp: "14:50", text: "Import functionality lets users restore their todo lists." },
  { timestamp: "14:55", text: "Always validate imported data to prevent errors." },
  { timestamp: "15:00", text: "Let's add user authentication to save todos per user." },
  { timestamp: "15:05", text: "This requires a backend API and authentication service." },
  { timestamp: "15:10", text: "Firebase Auth or Auth0 are popular choices for authentication." },
  { timestamp: "15:15", text: "Once authenticated, you can save todos to a database." },
  { timestamp: "15:20", text: "This enables syncing todos across different devices." },
  { timestamp: "15:25", text: "Let's implement real-time collaboration features." },
  { timestamp: "15:30", text: "WebSockets or services like Pusher enable real-time updates." },
  { timestamp: "15:35", text: "Multiple users can then work on the same todo list." },
  { timestamp: "15:40", text: "Conflict resolution becomes important with collaborative editing." },
  { timestamp: "15:45", text: "Let me show you how to add notifications for due todos." },
  { timestamp: "15:50", text: "The Notification API lets you show system notifications." },
  { timestamp: "15:55", text: "Always request permission before showing notifications." },
  { timestamp: "16:00", text: "You can also use in-app notifications for a less intrusive approach." },
  { timestamp: "16:05", text: "Let's add a dark mode toggle to our todo app." },
  { timestamp: "16:10", text: "CSS custom properties make theme switching easy." },
  { timestamp: "16:15", text: "Store the user's preference in localStorage." },
  { timestamp: "16:20", text: "You can also detect system dark mode preference." },
  { timestamp: "16:25", text: "Let's implement keyboard navigation for accessibility." },
  { timestamp: "16:30", text: "Users should be able to navigate without a mouse." },
  { timestamp: "16:35", text: "Tab order and focus management are crucial." },
  { timestamp: "16:40", text: "ARIA labels help screen readers understand your interface." },
  { timestamp: "16:45", text: "Let me show you how to add i18n for multiple languages." },
  { timestamp: "16:50", text: "Libraries like react-i18next handle translations well." },
  { timestamp: "16:55", text: "Store translations in JSON files for each language." },
  { timestamp: "17:00", text: "Let users switch languages with a dropdown selector." },
  { timestamp: "17:05", text: "Now let's optimize our app for mobile devices." },
  { timestamp: "17:10", text: "Responsive design ensures your app works on all screen sizes." },
  { timestamp: "17:15", text: "Touch gestures like swipe to delete enhance mobile UX." },
  { timestamp: "17:20", text: "Consider thumb reachability when placing interactive elements." },
  { timestamp: "17:25", text: "Let's add offline support with service workers." },
  { timestamp: "17:30", text: "This allows the app to work without internet connection." },
  { timestamp: "17:35", text: "Cache API stores assets and data for offline use." },
  { timestamp: "17:40", text: "Background sync can update data when connection returns." },
  { timestamp: "17:45", text: "Let me demonstrate progressive web app features." },
  { timestamp: "17:50", text: "PWAs can be installed like native apps." },
  { timestamp: "17:55", text: "Add a web app manifest for installation support." },
  { timestamp: "18:00", text: "Push notifications keep users engaged with your app." },
  { timestamp: "18:05", text: "Let's implement analytics to track user behavior." },
  { timestamp: "18:10", text: "Google Analytics or Mixpanel provide usage insights." },
  { timestamp: "18:15", text: "Track events like todo creation, completion, and deletion." },
  { timestamp: "18:20", text: "Use this data to improve your app based on user behavior." },
  { timestamp: "18:25", text: "Let me show you error handling best practices." },
  { timestamp: "18:30", text: "Try-catch blocks prevent crashes from breaking your app." },
  { timestamp: "18:35", text: "Error boundaries catch errors in React components." },
  { timestamp: "18:40", text: "User-friendly error messages improve the experience." },
  { timestamp: "18:45", text: "Logging errors helps you debug issues in production." },
  { timestamp: "18:50", text: "Let's add automated testing to ensure quality." },
  { timestamp: "18:55", text: "Unit tests verify individual functions work correctly." },
  { timestamp: "19:00", text: "Integration tests check that components work together." },
  { timestamp: "19:05", text: "End-to-end tests simulate real user interactions." },
  { timestamp: "19:10", text: "Continuous integration runs tests automatically." },
  { timestamp: "19:15", text: "This prevents bugs from reaching production." },
  { timestamp: "19:20", text: "Let me recap the key concepts we've covered." },
  { timestamp: "19:25", text: "React components, state management, and event handling." },
  { timestamp: "19:30", text: "Always focus on user experience and code quality." },
  { timestamp: "19:35", text: "Keep learning and building more complex projects." },
  { timestamp: "19:40", text: "The React ecosystem has so much more to explore." },
  { timestamp: "19:45", text: "Thank you for following along with this extended tutorial." },
  { timestamp: "19:50", text: "Please share your todo app variations in the comments." },
  { timestamp: "19:55", text: "Don't forget to like and subscribe for more content." },
  { timestamp: "20:00", text: "Happy coding, and see you in the next tutorial!" }
];